name: build

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      job:
        description: 'Job to run (optional)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ios
          - android
          - web
          - win
          - linux
          - qt
          - openharmony

jobs:
  ios:
    runs-on: macos-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Third-Party Cache
        id: third-party-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            third_party
          key: third-party-ios-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          restore-keys: third-party-ios-

      - uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: ninja yasm

      - name: Install Build Tools
        run: |
          chmod +x install_tools.sh
          ./install_tools.sh
        shell: bash

      - name: Run depsync
        run: |
          npm install depsync -g
          depsync
        shell: bash

      - name: Build iOS
        run: |
          cd ios
          node gen_ios -DTGFX_BUILD_SVG=ON
          xcodebuild -workspace Hello2D.xcworkspace -scheme Hello2D -configuration Release -sdk iphoneos -arch arm64 CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Save Third-Party Cache
        if: ${{ (github.event_name == 'push') && (steps.third-party-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with:
          path: |
            third_party
          key: third-party-ios-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}

      - name: Job Failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: ios_build
          path: ios

  android:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Third-Party Cache
        id: third-party-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            third_party
          key: third-party-android-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          restore-keys: third-party-android-

      - name: Run depsync
        run: |
          npm install depsync -g
          depsync

      - uses: seanmiddleditch/gha-setup-ninja@master

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Build Android
        run: |
          cd android
          ./gradlew assembleRelease -Parm64-only --no-daemon -PcmakeArgs="-DTGFX_BUILD_SVG=ON"

      - name: Save Third-Party Cache
        if: ${{ (github.event_name == 'push') && (steps.third-party-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with:
          path: |
            third_party
          key: third-party-android-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}

      - name: Job Failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: android_build
          path: android

  web:
    runs-on: windows-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Environment Cache
        id: environment-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            web/emsdk
            web/node_modules
          key: tgfx-environment-web-20241106
          restore-keys: tgfx-environment-web-

      - name: Get Third-Party Cache
        id: third-party-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            third_party
          key: third-party-web-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          restore-keys: third-party-web-

      - name: Install Build Tools
        if: ${{ (steps.environment-cache.outputs.cache-hit != 'true') }}
        run: |
          cd web
          npm install
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
          else
            cd emsdk
            git pull
            cd ..
          fi
          cd emsdk
          ./emsdk install 3.1.71
          ./emsdk activate 3.1.71
        shell: bash

      - name: Run depsync
        run: |
          npm install depsync -g
          depsync
        shell: bash

      - name: Build Web
        run: |
          cd web
          emsdk/emsdk_env
          npm run build:st:debug

      - name: Save Environment Cache
        if: ${{ (github.event_name == 'push') && (steps.environment-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with:
          path: |
            web/emsdk
            web/node_modules
          key: tgfx-environment-web-20241106

      - name: Save Third-Party Cache
        if: ${{ (github.event_name == 'push') && (steps.third-party-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with:
          path: |
            third_party
          key: third-party-web-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}

      - name: Job Failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: web_build
          path: |
            web
            !web/emsdk
            !web/node_modules

  win:
    runs-on: windows-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Third-Party Cache
        id: third-party-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            third_party
          key: third-party-windows-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          restore-keys: third-party-windows-

      - name: Run depsync
        run: |
          npm install depsync -g
          depsync
        shell: bash

      - name: Build Windows
        run: |
          node build_tgfx -s ./win Hello2D -DTGFX_BUILD_SVG=ON -o ./out/release/win -a x64 -d

      - name: Save Third-Party Cache
        if: ${{ (github.event_name == 'push') && (steps.third-party-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with:
          path: |
            third_party
          key: third-party-windows-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}

      - name: Job Failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: win_build
          path: out

  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Third-Party Cache
        id: third-party-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            third_party
          key: third-party-linux-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          restore-keys: third-party-linux-

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Run depsync
        run: |
          npm install depsync -g
          depsync
        shell: bash

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libx11-dev
          version: 1.0

      - name: Build Linux
        run: |
          node build_tgfx -s ./linux Hello2D -DTGFX_BUILD_SVG=ON -o ./out/release/linux -a x64 -d

      - name: Save Third-Party Cache
        if: ${{ (github.event_name == 'push') && (steps.third-party-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with:
          path: |
            third_party
          key: third-party-linux-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}

      - name: Job Failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: linux_build
          path: out

  qt:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Get Third-Party Cache
        id: third-party-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            third_party
          key: third-party-qt-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          restore-keys: third-party-qt-

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Run depsync
        run: |
          npm install depsync -g
          depsync
        shell: bash

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          host: 'linux'
          target: 'desktop'
          version: '6.8.3'
          dir: '${{github.workspace}}/qt/'
          install-deps: 'true'
          cache: 'true'
          aqtversion: '==3.2.1'
          cache-key-prefix: 'install-qt-action'

      - name: Build QT
        run: |
          node build_tgfx -s ./qt Hello2D -DCMAKE_PREFIX_PATH="${{env.QT_ROOT_DIR}}/lib/cmake" -DTGFX_BUILD_SVG=ON -o ./out/release/qt -a x64

      - name: Save Third-Party Cache
        if: ${{ (github.event_name == 'push') && (steps.third-party-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with:
          path: |
            third_party
          key: third-party-qt-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}

      - name: Job Failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: qt_build
          path: out


  openharmony:
    runs-on: macos-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          lfs: true
          
      - name: Get Third-Party Cache
        id: third-party-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            third_party
          key: third-party-openharmony-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          restore-keys: third-party-openharmony-

      - name: Run depsync
        run: |
          npm install depsync -g
          depsync
        shell: bash

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'  

      - name: Setup OpenHarmony Build Environment
        uses: eclipse-oniro4openharmony/oh-app-action@main
        with:
          working-directory: './ohos'

      - name: Configure SDK Path
        run: |
            cd ohos
            # 设置SDK路径从环境变量
            if [ -n "${HOS_SDK_HOME:-}" ]; then
              SDK_PATH="${HOS_SDK_HOME}"
              echo "Using HOS_SDK_HOME: ${SDK_PATH}"
            elif [ -n "${OHOS_SDK_HOME:-}" ]; then
              SDK_PATH="${OHOS_SDK_HOME}"
              echo "Using OHOS_SDK_HOME: ${SDK_PATH}"
            else
              echo "Error: Neither HOS_SDK_HOME nor OHOS_SDK_HOME is set"
              exit 1
            fi
            
            echo "hwsdk.dir=${SDK_PATH}" > local.properties
            echo "Configured SDK path: ${SDK_PATH}"
            
            # 验证SDK目录结构
            if [ ! -d "${SDK_PATH}" ]; then
              echo "Error: SDK path does not exist: ${SDK_PATH}"
              exit 1
            fi
            
            # 验证库文件存在
            LIB_PATH="${SDK_PATH}/native/sysroot/usr/lib"
            if [ -d "${LIB_PATH}" ]; then
              echo "Library directory found: ${LIB_PATH}"
              echo "Available libraries:"
              ls -la "${LIB_PATH}" | grep -E "(pixelmap|image_source)"
              
              # 检查必需的库文件
              REQUIRED_LIBS=("libpixelmap.so" "libimage_source.so" "libpixelmap_ndk.z.so" "libimage_source_ndk.z.so")
              for lib in "${REQUIRED_LIBS[@]}"; do
                if [ -f "${LIB_PATH}/${lib}" ]; then
                  echo "✓ Found: ${lib}"
                else
                  echo "✗ Missing: ${lib}"
                fi
              done
            else
              echo "Error: Library directory not found at ${LIB_PATH}"
              echo "SDK structure:"
              find "${SDK_PATH}" -type d -name "lib*" | head -20
              exit 1
            fi
        shell: bash 

      - name: Install Dependencies
        run: |
          cd ohos
          ohpm install --all
        shell: bash
          
      - name: Build OpenHarmony Project
        run: |
          cd ohos
          chmod +x ./hvigorw
          ./hvigorw --version --accept-license
          ./hvigorw clean --no-parallel --no-daemon
          ./hvigorw assembleHap --mode module -p product=default --stacktrace --no-parallel --no-daemon -PcmakeArgs="-DZLIB_LIBRARY_TYPE=STATIC -DPNG_SHARED=OFF"
 
        shell: bash
          
      - name: Additional Setup
        run: |
          mkdir -p third_party/tgfx/out/cache

      - name: Save Third-Party Cache
        if: ${{ (github.event_name == 'push') && (steps.third-party-cache.outputs.cache-hit != 'true') }}
        uses: actions/cache/save@v4
        with: 
          path: |
            third_party
          key: third-party-openharmony-${{ hashFiles('DEPS') }}-${{ hashFiles('vendor.json') }}
          
      - name: Job Failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with: 
          name: openharmony_build
          path: ohos        
